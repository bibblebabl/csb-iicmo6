{"version":3,"sources":["src/data.ts","src/utils.ts","src/select.ts","src/index.ts"],"names":[],"mappings":"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","file":"src.d2f3db6d.js","sourceRoot":"..","sourcesContent":["export const DEFAULT_OPTION = 'Ничего не найдено'\n\nexport const selectOptions = ['Опция 1', 'Опция 2', 'Опция 3', 'Опция 4', 'Опция 5', 'Опция 6']\n","export enum SelectActions {\n  Close = 0,\n  CloseSelect = 1,\n  First = 2,\n  Last = 3,\n  Next = 4,\n  Open = 5,\n  PageDown = 6,\n  PageUp = 7,\n  Previous = 8,\n  Select = 9,\n  Type = 10,\n}\n\n/*\n * Helper functions\n */\n\n// filter an array of options against an input string\n// returns an array of options that begin with the filter string, case-independent\nfunction filterOptions(options: string[] = [], filter, exclude = []) {\n  return options.filter((option) => {\n    const matches = option.toLowerCase().indexOf(filter.toLowerCase()) === 0\n    return matches && exclude.indexOf(option) < 0\n  })\n}\n\n// map a key press to an action\nexport function getActionFromKey(event: KeyboardEvent, menuOpen: boolean) {\n  const { key, altKey, ctrlKey, metaKey } = event\n  const openKeys = ['ArrowDown', 'ArrowUp', 'Enter', ' '] // all keys that will do the default open action\n  // handle opening when closed\n  if (!menuOpen && openKeys.includes(key)) {\n    return SelectActions.Open\n  }\n\n  // home and end move the selected option when open or closed\n  if (key === 'Home') {\n    return SelectActions.First\n  }\n  if (key === 'End') {\n    return SelectActions.Last\n  }\n\n  // handle typing characters when open or closed\n  if (\n    key === 'Backspace' ||\n    key === 'Clear' ||\n    (key.length === 1 && key !== ' ' && !altKey && !ctrlKey && !metaKey)\n  ) {\n    return SelectActions.Type\n  }\n\n  // handle keys when open\n  if (menuOpen) {\n    if (key === 'ArrowUp' && altKey) {\n      return SelectActions.CloseSelect\n    } else if (key === 'ArrowDown' && !altKey) {\n      return SelectActions.Next\n    } else if (key === 'ArrowUp') {\n      return SelectActions.Previous\n    } else if (key === 'PageUp') {\n      return SelectActions.PageUp\n    } else if (key === 'PageDown') {\n      return SelectActions.PageDown\n    } else if (key === 'Escape') {\n      return SelectActions.Close\n    } else if (key === 'Enter' || key === ' ') {\n      return SelectActions.CloseSelect\n    }\n  }\n}\n\n// return the index of an option from an array of options, based on a search string\n// if the filter is multiple iterations of the same letter (e.g \"aaa\"), then cycle through first-letter matches\nexport function getIndexByLetter(options, filter, startIndex = 0) {\n  const orderedOptions = [...options.slice(startIndex), ...options.slice(0, startIndex)]\n  const firstMatch = filterOptions(orderedOptions, filter)[0]\n  const allSameLetter = (array) => array.every((letter) => letter === array[0])\n\n  // first check if there is an exact match for the typed string\n  if (firstMatch) {\n    return options.indexOf(firstMatch)\n  }\n\n  // if the same letter is being repeated, cycle through first-letter matches\n  else if (allSameLetter(filter.split(''))) {\n    const matches = filterOptions(orderedOptions, filter[0])\n    return options.indexOf(matches[0])\n  }\n\n  // if no matches, return -1\n  else {\n    return -1\n  }\n}\n\n// get an updated option index after performing an action\nexport function getUpdatedIndex(currentIndex, maxIndex, action) {\n  const pageSize = 10 // used for pageup/pagedown\n\n  switch (action) {\n    case SelectActions.First:\n      return 0\n    case SelectActions.Last:\n      return maxIndex\n    case SelectActions.Previous:\n      return Math.max(0, currentIndex - 1)\n    case SelectActions.Next:\n      return Math.min(maxIndex, currentIndex + 1)\n    case SelectActions.PageUp:\n      return Math.max(0, currentIndex - pageSize)\n    case SelectActions.PageDown:\n      return Math.min(maxIndex, currentIndex + pageSize)\n    default:\n      return currentIndex\n  }\n}\n\n// check if element is visible in browser view port\nexport function isElementInView(element) {\n  var bounding = element.getBoundingClientRect()\n\n  return (\n    bounding.top >= 0 &&\n    bounding.left >= 0 &&\n    bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&\n    bounding.right <= (window.innerWidth || document.documentElement.clientWidth)\n  )\n}\n\n// check if an element is currently scrollable\nexport function isScrollable(element) {\n  return element && element.clientHeight < element.scrollHeight\n}\n\n// ensure a given child element is within the parent's visible scroll area\n// if the child is not visible, scroll the parent\nexport function maintainScrollVisibility(activeElement, scrollParent) {\n  const { offsetHeight, offsetTop } = activeElement\n  const { offsetHeight: parentOffsetHeight, scrollTop } = scrollParent\n\n  const isAbove = offsetTop < scrollTop\n  const isBelow = offsetTop + offsetHeight > scrollTop + parentOffsetHeight\n\n  if (isAbove) {\n    scrollParent.scrollTo(0, offsetTop)\n  } else if (isBelow) {\n    scrollParent.scrollTo(0, offsetTop - parentOffsetHeight + offsetHeight)\n  }\n}\n","import { DEFAULT_OPTION } from './data'\nimport {\n  SelectActions,\n  getActionFromKey,\n  getIndexByLetter,\n  getUpdatedIndex,\n  isElementInView,\n  isScrollable,\n  maintainScrollVisibility,\n} from './utils'\n\nexport class Select {\n  private element: HTMLElement\n  private comboboxElement: HTMLElement\n  private listboxElement: HTMLElement\n  private id: string\n\n  private options: string[]\n\n  private activeIndex: number\n  private open: boolean\n  private searchString: string\n  private searchTimeout: number | null\n  private ignoreBlur: boolean\n\n  constructor(\n    elements: {\n      element: HTMLElement\n      comboboxElement: HTMLElement\n      listboxElement: HTMLElement\n    },\n    selectOptions: string[] = []\n  ) {\n    this.element = elements.element\n    this.comboboxElement = elements.comboboxElement\n    this.listboxElement = elements.listboxElement\n    this.id = this.comboboxElement?.id || 'combo'\n\n    // data\n    this.options = selectOptions\n\n    // state\n    this.activeIndex = 0\n    this.open = false\n    this.searchString = ''\n    this.searchTimeout = null\n    this.ignoreBlur = false\n\n    // init\n    if (this.element && this.comboboxElement && this.listboxElement) {\n      this.init()\n    }\n  }\n\n  init() {\n    // select first option by default\n    this.comboboxElement.innerHTML = DEFAULT_OPTION\n\n    // add event listeners\n    this.comboboxElement.addEventListener('blur', this.onComboBlur.bind(this))\n    this.comboboxElement.addEventListener('click', this.onComboClick.bind(this))\n    this.comboboxElement.addEventListener('keydown', this.onComboKeyDown.bind(this))\n\n    // create options\n    this.options.map((option, index) => {\n      const optionEl = this.createOption(option, index)\n      this.listboxElement.appendChild(optionEl)\n    })\n  }\n\n  createOption(optionText: string, index: number) {\n    const optionElelement = document.createElement('div')\n    optionElelement.setAttribute('role', 'option')\n    optionElelement.id = `${this.id}-${index}`\n    optionElelement.className =\n      index === 0\n        ? `combo__option combo__option--${index} option-current`\n        : `combo__option combo__option--${index}`\n    optionElelement.setAttribute('aria-selected', `${index === 0}`)\n    optionElelement.innerText = optionText\n\n    optionElelement.addEventListener('click', (event) => {\n      event.stopPropagation()\n      this.onOptionClick(index)\n    })\n    optionElelement.addEventListener('mousedown', this.onOptionMouseDown.bind(this))\n\n    return optionElelement\n  }\n\n  getSearchString(char: string) {\n    // reset typing timeout and start new timeout\n    // this allows us to make multiple-letter matches, like a native select\n    if (typeof this.searchTimeout === 'number') {\n      window.clearTimeout(this.searchTimeout)\n    }\n\n    this.searchTimeout = window.setTimeout(() => {\n      this.searchString = ''\n    }, 500)\n\n    // add most recent letter to saved search string\n    this.searchString += char\n    return this.searchString\n  }\n\n  onComboBlur() {\n    // do not do blur action if ignoreBlur flag has been set\n    if (this.ignoreBlur) {\n      this.ignoreBlur = false\n      return\n    }\n\n    // select current option and close\n    if (this.open) {\n      this.selectOption(this.activeIndex)\n      this.updateMenuState(false, false)\n    }\n  }\n\n  onComboClick() {\n    this.updateMenuState(!this.open, false)\n  }\n\n  onComboKeyDown(event: KeyboardEvent) {\n    const { key } = event\n    const max = this.options.length - 1\n\n    const action = getActionFromKey(event, this.open)\n\n    switch (action) {\n      case SelectActions.Last:\n      case SelectActions.First:\n        this.updateMenuState(true)\n      // intentional fallthrough\n      case SelectActions.Next:\n      case SelectActions.Previous:\n      case SelectActions.PageUp:\n      case SelectActions.PageDown:\n        event.preventDefault()\n        return this.onOptionChange(getUpdatedIndex(this.activeIndex, max, action))\n      case SelectActions.CloseSelect:\n        event.preventDefault()\n        this.selectOption(this.activeIndex)\n      // intentional fallthrough\n      case SelectActions.Close:\n        event.preventDefault()\n        return this.updateMenuState(false)\n      case SelectActions.Type:\n        return this.onComboType(key)\n      case SelectActions.Open:\n        event.preventDefault()\n        return this.updateMenuState(true)\n    }\n  }\n\n  onComboType(letter: string) {\n    // open the listbox if it is closed\n    this.updateMenuState(true)\n\n    // find the index of the first matching option\n    const searchString = this.getSearchString(letter)\n    const searchIndex = getIndexByLetter(this.options, searchString, this.activeIndex + 1)\n\n    // if a match was found, go to it\n    if (searchIndex >= 0) {\n      this.onOptionChange(searchIndex)\n    }\n    // if no matches, clear the timeout and search string\n    else {\n      if (this.searchTimeout) {\n        window.clearTimeout(this.searchTimeout)\n      }\n      this.searchString = ''\n    }\n  }\n\n  onOptionChange(index: number) {\n    // update state\n    this.activeIndex = index\n\n    // update aria-activedescendant\n    this.comboboxElement.setAttribute('aria-activedescendant', `${this.id}-${index}`)\n\n    // update active option styles\n    const options = this.element.querySelectorAll('[role=option]')\n\n    options.forEach((optionEl) => {\n      optionEl.classList.remove('option-current')\n    })\n\n    options[index].classList.add('option-current')\n\n    // ensure the new option is in view\n    if (isScrollable(this.listboxElement)) {\n      maintainScrollVisibility(options[index], this.listboxElement)\n    }\n\n    // ensure the new option is visible on screen\n    // ensure the new option is in view\n    if (!isElementInView(options[index])) {\n      options[index].scrollIntoView({ behavior: 'smooth', block: 'nearest' })\n    }\n  }\n\n  onOptionClick(index: number) {\n    this.onOptionChange(index)\n    this.selectOption(index)\n    this.updateMenuState(false)\n  }\n\n  onOptionMouseDown() {\n    // Clicking an option will cause a blur event,\n    // but we don't want to perform the default keyboard blur action\n    this.ignoreBlur = true\n  }\n\n  selectOption(index: number) {\n    // update state\n    this.activeIndex = index\n\n    // update displayed value\n    const selected = this.options[index]\n    this.comboboxElement.innerHTML = selected\n\n    // update aria-selected\n    const options = this.element.querySelectorAll('[role=option]')\n\n    Array.from(options).forEach((optionEl) => {\n      optionEl.setAttribute('aria-selected', 'false')\n    })\n\n    options[index].setAttribute('aria-selected', 'true')\n    this.comboboxElement.setAttribute('data-selected', index.toString())\n  }\n\n  updateMenuState(open: boolean, callFocus = true) {\n    if (this.open === open) {\n      return\n    }\n\n    // update state\n    this.open = open\n\n    // update aria-expanded and styles\n    this.comboboxElement.setAttribute('aria-expanded', `${open}`)\n    open ? this.element.classList.add('open') : this.element.classList.remove('open')\n\n    // update activedescendant\n    const activeID = open ? `${this.id}-${this.activeIndex}` : ''\n    this.comboboxElement.setAttribute('aria-activedescendant', activeID)\n\n    if (activeID === '' && !isElementInView(this.comboboxElement)) {\n      this.comboboxElement.scrollIntoView({ behavior: 'smooth', block: 'nearest' })\n    }\n\n    // move focus back to the combobox, if needed\n    callFocus && this.comboboxElement.focus()\n  }\n}\n","import './styles.css'\nimport { Select } from './select'\nimport { selectOptions } from './data'\n\n// init select\nwindow.addEventListener('load', function () {\n  const comboboxSelect: NodeListOf<HTMLElement> = document.querySelectorAll('.combo__select')\n\n  comboboxSelect.forEach((element) => {\n    const comboboxElement = element.querySelector('[role=combobox]')\n    const listboxElement = element.querySelector('[role=listbox]')\n\n    new Select(\n      {\n        element,\n        comboboxElement: comboboxElement as HTMLElement,\n        listboxElement: listboxElement as HTMLElement,\n      },\n      selectOptions\n    )\n  })\n})\n"]}